'use client';

import { useState } from 'react';
import Link from 'next/link';
import { usePathname } from 'next/navigation';
import { ChevronDown, MenuIcon } from 'lucide-react';

import { Button } from '@/components/ui/button';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import {
  Sheet,
  SheetContent,
  SheetHeader,
  SheetTitle,
  SheetTrigger,
} from '@/components/ui/sheet';
import { cn } from '@/lib/utils';
import { useKidsMode } from '@/lib/kids-mode-context';

interface MenuItem {
  label: string;
  href?: string;
  description?: string;
  submenu?: Array<{ label: string; href: string; description?: string }>;
}

const adultMenuItems: MenuItem[] = [
  {
    label: '„Ç≥„É≥„ÉÜ„É≥„ÉÑ',
    submenu: [
      { label: '„Çπ„Ç≠„É´‰∏ÄË¶ß', href: '/skills', description: '„Ç´„ÉÜ„Ç¥„É™Ê®™Êñ≠„ÅÆ„Çπ„Ç≠„É´ÂÆöÁæ©„Çí‰øØÁû∞' },
      { label: 'ËÅ∑Á®Æ‰∏ÄË¶ß', href: '/roles', description: 'ÂÆáÂÆôÁî£Ê•≠„ÅÆÂΩπÂâ≤„Å®Ë≤¨Âãô„ÇíÁ¢∫Ë™ç' },
    ],
  },
  {
    label: 'Ë®∫Êñ≠',
    submenu: [
      { label: '„ÇØ„Ç§„ÉÉ„ÇØË®∫Êñ≠', href: '/quick-assessment', description: 'Êï∞ÂàÜ„ÅßÂÇæÂêë„ÇíÊääÊè°' },
      { label: 'Ë©≥Á¥∞Ë®∫Êñ≠', href: '/categories', description: '„Ç´„ÉÜ„Ç¥„É™„Åî„Å®„Å´‰∏ÅÂØß„Å´Ëá™Â∑±Ë©ï‰æ°' },
    ],
  },
  {
    label: 'ÁµêÊûú',
    submenu: [
      { label: '„ÇØ„Ç§„ÉÉ„ÇØË®∫Êñ≠ÁµêÊûú', href: '/quick-assessment/results', description: 'Áõ¥Ëøë„ÅÆ„ÇØ„Ç§„ÉÉ„ÇØË®∫Êñ≠ÁµêÊûú„ÇíÂÜçÁ¢∫Ë™ç' },
      { label: 'Ë©≥Á¥∞Ë®∫Êñ≠ÁµêÊûú', href: '/results', description: '„Ç´„ÉÜ„Ç¥„É™Âçò‰Ωç„ÅÆË©ï‰æ°ÁµêÊûú„ÇíÂèØË¶ñÂåñ' },
    ],
  },
  {
    label: '„Åì„ÅÆ„Çµ„Ç§„Éà„Å´„Å§„ÅÑ„Å¶',
    href: '/about',
    description: '„Ç≥„É≥„Çª„Éó„Éà„ÇÑ„Éá„Éº„Çø„ÇΩ„Éº„Çπ„ÇíÊï¥ÁêÜ',
  },
];

const kidsMenuItems: MenuItem[] = [
  {
    label: 'ÂÆáÂÆô„ÅÆ„Åó„Åî„Å®„ÇíË¶ã„Çã',
    submenu: [
      { label: '„Åß„Åç„Çã„Åì„Å®‰∏ÄË¶ß', href: '/skills', description: 'ÂÆáÂÆô„ÅÆ„Åó„Åî„Å®„Å´ÂøÖË¶Å„Å™Âäõ„Çí‰∏ÄË¶ß„ÅßÁ¢∫Ë™ç' },
      { label: '„Åó„Åî„Å®„ÅÆÁ®ÆÈ°û‰∏ÄË¶ß', href: '/roles', description: '„Å©„Çì„Å™„Åó„Åî„Å®„Åå„ÅÇ„Çã„ÅãË¶ã„Å¶„Åø„Çà„ÅÜ' },
    ],
  },
  {
    label: 'Ë®∫Êñ≠„Çí„Åô„Çã',
    href: '/quick-assessment',
    description: 'Ëá™ÂàÜ„Å´Âêà„Å£„Åü„Åó„Åî„Å®„ÇíÊé¢„Åù„ÅÜ',
  },
  {
    label: 'Ë®∫Êñ≠ÁµêÊûú„ÇíË¶ã„Çã',
    href: '/quick-assessment/results',
    description: 'Ë®∫Êñ≠„ÅÆÁµêÊûú„Çí„ÇÇ„ÅÜ‰∏ÄÂ∫¶Ë¶ã„Çã',
  },
  {
    label: '„Åì„ÅÆ„Ç¢„Éó„É™„Å´„Å§„ÅÑ„Å¶',
    href: '/about',
    description: '„Ç¢„Éó„É™„ÅÆÁ¥π‰ªã',
  },
];

function ModeToggle({
  isKidsMode,
  setMode,
  className,
}: {
  isKidsMode: boolean;
  setMode: (mode: 'adult' | 'kids') => void;
  className?: string;
}) {
  return (
    <div
      className={cn(
        'flex items-center gap-1 rounded-full border border-border/70 bg-muted/60 p-1',
        className
      )}
    >
      <Button
        size="sm"
        variant={isKidsMode ? 'ghost' : 'secondary'}
        className="h-8 px-3 text-xs font-medium flex items-center gap-1.5"
        onClick={() => setMode('adult')}
      >
        <span className="text-sm leading-none">üíº</span>
        <span className="leading-none">ÈÄöÂ∏∏„É¢„Éº„Éâ</span>
      </Button>
      <Button
        size="sm"
        variant={isKidsMode ? 'secondary' : 'ghost'}
        className="h-8 px-3 text-xs font-medium flex items-center gap-1.5"
        onClick={() => setMode('kids')}
      >
        <span className="text-sm leading-none">üéà</span>
        <span className="leading-none">Â≠ê‰æõÂêë„Åë</span>
      </Button>
    </div>
  );
}

export default function Header() {
  const pathname = usePathname();
  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);
  const { isKidsMode, setMode } = useKidsMode();

  const isActive = (href?: string) => {
    if (!href) return false;
    return pathname === href || pathname?.startsWith(`${href}/`);
  };

  const isMenuActive = (item: MenuItem) => {
    if (item.href) return isActive(item.href);
    if (item.submenu) {
      return item.submenu.some((subItem) => isActive(subItem.href));
    }
    return false;
  };

  const handleMobileLinkClick = () => {
    setMobileMenuOpen(false);
  };

  const menuItemsToRender = isKidsMode ? kidsMenuItems : adultMenuItems;

  return (
    <header className="sticky top-0 z-40 w-full border-b border-border bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">
      <div className="container flex h-16 items-center justify-between gap-4">
        {/* Logo */}
        <Link href="/" className="flex items-center gap-2.5 text-sm font-bold tracking-tight sm:text-base">
          <span className="text-2xl">üöÄ</span>
          <span className="whitespace-nowrap">
            {isKidsMode ? 'ÂÆáÂÆô„ÅÆ„Åó„Åî„Å®' : 'CAREER IN SPACE'}
          </span>
        </Link>

        {/* Desktop Menu */}
        <nav className="hidden lg:flex lg:items-center lg:gap-2">
          {menuItemsToRender.map((item) => {
            if (item.submenu) {
              return (
                <DropdownMenu key={item.label}>
                  <DropdownMenuTrigger asChild>
                    <Button
                      variant="ghost"
                      className={cn(
                        'gap-1',
                        isMenuActive(item) && 'bg-muted text-foreground'
                      )}
                    >
                      {item.label}
                      <ChevronDown className="h-4 w-4 opacity-50" />
                    </Button>
                  </DropdownMenuTrigger>
                  <DropdownMenuContent align="start" className="w-[280px] text-left">
                    {item.submenu.map((subItem) => (
                      <DropdownMenuItem key={subItem.href} asChild className="justify-start">
                        <Link
                          href={subItem.href}
                          className={cn(
                            'flex flex-col items-start gap-1 py-3 text-left',
                            isActive(subItem.href) && 'bg-accent'
                          )}
                        >
                          <span className="font-medium">{subItem.label}</span>
                          {subItem.description && (
                            <span className="text-xs text-muted-foreground">
                              {subItem.description}
                            </span>
                          )}
                        </Link>
                      </DropdownMenuItem>
                    ))}
                  </DropdownMenuContent>
                </DropdownMenu>
              );
            }

            return (
              <Button
                key={item.label}
                variant="ghost"
                className={cn(isActive(item.href) && 'bg-muted text-foreground')}
                asChild
              >
                <Link href={item.href ?? '#'}>{item.label}</Link>
              </Button>
            );
          })}
        </nav>

        {/* Right Side Actions */}
        <div className="flex items-center gap-2">
          {/* Kids Mode Toggle Button */}
          <ModeToggle isKidsMode={isKidsMode} setMode={setMode} className="hidden lg:flex" />

          {/* Mobile quick toggle */}
          <Button
            variant="outline"
            size="sm"
            className="lg:hidden gap-2 px-3 text-xs font-medium items-center"
            onClick={() => setMode(isKidsMode ? 'adult' : 'kids')}
          >
            <span className="text-base leading-none" aria-hidden>
              {isKidsMode ? 'üéà' : 'üíº'}
            </span>
            <span className="leading-none">{isKidsMode ? 'Â≠ê‰æõÂêë„Åë' : 'ÈÄöÂ∏∏'}„É¢„Éº„Éâ</span>
          </Button>

          {/* Mobile Menu */}
          <Sheet open={mobileMenuOpen} onOpenChange={setMobileMenuOpen}>
            <SheetTrigger asChild>
              <Button variant="ghost" size="icon" className="lg:hidden">
                <MenuIcon className="h-5 w-5" />
                <span className="sr-only">„É°„Éã„É•„Éº</span>
              </Button>
          </SheetTrigger>
            <SheetContent side="right" className="flex w-[320px] flex-col gap-6 border-l border-border/60">
              <SheetHeader>
                <div className="flex items-center justify-between gap-3">
                  <SheetTitle>„Éä„Éì„Ç≤„Éº„Ç∑„Éß„É≥</SheetTitle>
                  <ModeToggle isKidsMode={isKidsMode} setMode={setMode} />
                </div>
              </SheetHeader>
              <nav className="flex flex-col gap-4">
        {menuItemsToRender.map((item) => (
                  <div key={item.label}>
                    {item.submenu ? (
                      <div className="space-y-2">
                        <p className="text-xs font-semibold uppercase tracking-wide text-muted-foreground">
                          {item.label}
                        </p>
                        <div className="space-y-1">
                          {item.submenu.map((subItem) => (
                            <Button
                              key={subItem.href}
                              variant={isActive(subItem.href) ? 'secondary' : 'ghost'}
                              className="w-full justify-start"
                              asChild
                            >
                              <Link href={subItem.href} onClick={handleMobileLinkClick}>
                                <div className="flex flex-col items-start">
                                  <span className="text-sm font-medium">{subItem.label}</span>
                                  {subItem.description && (
                                    <span className="text-xs text-muted-foreground">
                                      {subItem.description}
                                    </span>
                                  )}
                                </div>
                              </Link>
                            </Button>
                          ))}
                        </div>
                      </div>
                    ) : (
                      <Button
                        variant={isActive(item.href) ? 'secondary' : 'ghost'}
                        className="w-full justify-start"
                        asChild
                      >
                        <Link href={item.href ?? '#'} onClick={handleMobileLinkClick}>{item.label}</Link>
                      </Button>
                    )}
                  </div>
                ))}
              </nav>
            </SheetContent>
          </Sheet>
        </div>
      </div>
    </header>
  );
}
